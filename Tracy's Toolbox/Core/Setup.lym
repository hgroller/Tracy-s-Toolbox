<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Setup</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>trt_menu.core_submenu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>## Setup.lym
## By davidnhutch
## 
## Sets several useful parameters. This script only needs to be run once. 
## 
## (I don't like some of the default settings; this code changes those defaults 
## to something I like better. Each setting changed in this code can be changed 
## manually using the GUI [mostly in File &gt; Setup], but this code provides a 
## convenient way to change all these settings at once.) 
## 
## Before running this script, I recommend going through the code and commenting out 
## any undesired functions (or just manually change them back later using the GUI). 
## 
## This uses the key bindings modifying script from http://klayout.de/forum/comments.php?DiscussionID=644
## -- this should be safe but no promises that this won't corrupt your .klayoutrc 
## config file. You can backup your klayoutrc file first to be safe.

include RBA

result = MessageBox.warning(
  "Are you sure?",
  "This script sets several KLayout settings and messes with your .klayoutrc settings file. It is recommended to read the script and the warnings in the comments first to see what will be changed. This script only needs to be run once, then KLayout should be restarted to ensure it remembers the new settings.",
  MessageBox::Ok + MessageBox::Cancel)

if result == MessageBox::Ok

  app = Application.instance
  
  # SELECTIONS
  # The default selection border is black 1 pixel wide, which is confusing because that is also the color that cell outlines are shown in when they are below the current view hierarchy. It is also the same as the hover border style. So change selection border style to red 2 pixels wide and hover border style to red 1 pixel wide to solve both problems.
  app.set_config("sel-color",         "#ff0000")
  app.set_config("sel-halo",          "true")
  app.set_config("sel-line-width",    "2")
  app.set_config("sel-transient-mode","true")
  
  # GRIDS
  # I prefer to see the x=0 and y=0 lines, and grids as dots:
  app.set_config("default-grids", "100,1,0.001")
  app.set_config("grid-style0", "lines")
  app.set_config("grid-style1", "tenths-dotted-lines")
  app.set_config("grid-style2", "tenths-dotted-lines")
  app.set_config("grid-visible","true")
  
  # RULERS
  # There is only one default ruler. This code installs several other useful rulers. These are to be found under the Rulers dropdown arrow on the toolbar.
  # In addition, I don't like how it shows like 5 decimal places by default. Since 
  # my manufacturing grid is 1nm and base unit is 1um, I only need to show three 
  # decimal places, like 123.456. Lastly, I want to show nothing after the decimal 
  # place when it's an exact measurement, i.e. I want to show 3 instead of 3.000. 
  # So that is what all that " ... ? ... : ... " logic is for in the long lines 
  # below. 
  app.set_config("ruler-templates",
    %&amp;
    title=Ruler,
    fmt="$((sprintf(\'%.0f\',D) + \'.000\')==(sprintf(\'%.3f\',D)) ? (sprintf(\'%.0f\',D)) : (sprintf(\'%.3f\',D)))",
    fmt_x=$X,
    fmt_y=$Y,
    style=ruler,
    outline=diag,
    snap=true,
    angle_constraint=global;
    
    title=OrthRul,
    fmt="$((sprintf(\'%.0f\',D) + \'.000\')==(sprintf(\'%.3f\',D)) ? (sprintf(\'%.0f\',D)) : (sprintf(\'%.3f\',D)))",
    fmt_x=$X,
    fmt_y=$Y,
    style=ruler,
    outline=diag,
    snap=true,
    angle_constraint=ortho;
    
    title=Arrow,
    fmt='',
    fmt_x=$X,
    fmt_y=$Y,
    style=arrow_end,
    outline=diag,
    snap=true,
    angle_constraint=global;
    
    title=DoubArrow,
    fmt='',
    fmt_x=$X,
    fmt_y=$Y,
    style=arrow_both,
    outline=diag,
    snap=true,
    angle_constraint=global;
    
    title=DistArrow,
    fmt="$((sprintf(\'%.0f\',D) + \'.000\')==(sprintf(\'%.3f\',D)) ? (sprintf(\'%.0f\',D)) : (sprintf(\'%.3f\',D)))",
    fmt_x=$X,
    fmt_y=$Y,
    style=arrow_both,
    outline=diag,
    snap=true,
    angle_constraint=global;
    
    title=BoxMkr,
    fmt='',
    fmt_x="$((sprintf(\'%.0f\',X) + \'.000\')==(sprintf(\'%.3f\',X)) ? (sprintf(\'%.0f\',X)) : (sprintf(\'%.3f\',X)))",
    fmt_y="$((sprintf(\'%.0f\',Y) + \'.000\')==(sprintf(\'%.3f\',Y)) ? (sprintf(\'%.0f\',Y)) : (sprintf(\'%.3f\',Y)))",
    style=line,
    outline=box,
    snap=true,
    angle_constraint=global
    
    &amp;)
  
  # OTHER SETTINGS
  # Some random things
  app.set_config("paste-display-mode", "1") # On paste, 1 =&gt; Don't change view, 1 =&gt; Pan to pasted objects, 2 =&gt; Zoom to pasted objects
  app.set_config("full-hierarchy-new-cell", "true") # On cell change, show all hierarchy levels
  app.set_config("child-context-dimming", "99") # Dim the non-focused content by a lot (99%) in context view (While using Ascend/Descend) 
  app.set_config("digits-micron","3") # The default is 5, so you get numbers like "1.23456 um" which is too many. Usual manufacturing grid is 1nm for me, so 3 decimal places is all I want to see
    
  # KEY BINDINGS
  # Set some key bindings that I prefer. I have listed all the ones I use, even if there is no change to the setting.
  # get the config string
  
  config = RBA::Application.instance.get_config('key-bindings')
  #puts config.split(';') # Print all current ones out
  
  # turn it into a hash
  def config.to_mapping
    in_str = false
    escaped = false
    item = key = ""
    m = {}
    each_char do |c|
      if in_str &amp;&amp; c == "\\"
        escaped = true
        item += c
      elsif escaped &amp;&amp; c == "'"
        escaped = false
        item += c
      elsif c == "'"
        in_str = !in_str
        item += c
      elsif !in_str &amp;&amp; c == ':'
        key = item
        item = ''
      elsif !in_str &amp;&amp; c == ';'
        m[key] = item
        item = ''
      else
        item += c
      end
    end
    m[key] = item
    m
  end
  mapping = config.to_mapping
  
  # access a single setting and change it
  #puts mapping['edit_menu.mode_menu.partial'] # Print the current setting
  
  mapping['edit_menu.clear_all_rulers'] = "'Ctrl+K'"
  mapping['edit_menu.copy'] = "'Ctrl+C'"
  mapping['edit_menu.cut'] = "'Ctrl+X'"
  mapping['edit_menu.paste'] = "'Ctrl+V'"
  mapping['edit_menu.redo'] = "'Ctrl+Y'"
  mapping['edit_menu.undo'] = "'Ctrl+Z'"
  mapping['edit_menu.delete'] = "'Del'"
  mapping['edit_menu.duplicate'] = "'Ctrl+B'"
  mapping['edit_menu.mode_menu.move'] = "'M'"
  mapping['edit_menu.mode_menu.ruler'] = "'R'"
  mapping['edit_menu.mode_menu.select'] = "'S'"
  mapping['edit_menu.mode_menu.box'] = "'B'"
  mapping['edit_menu.mode_menu.instance'] = "'I'"
  mapping['edit_menu.mode_menu.partial'] = "'L'"
  mapping['edit_menu.mode_menu.path'] = "'P'"
  mapping['edit_menu.mode_menu.polygon'] = "'G'"
  mapping['edit_menu.mode_menu.text'] = "'X'"
  mapping['edit_menu.select_menu.select_all'] = "'Ctrl+A'"
  mapping['edit_menu.show_properties'] = "'Q'"
  mapping['edit_menu.edit_options'] = "'F3'"
  mapping['edit_menu.selection_menu.change_layer'] = "'Shift+L'"
  mapping['edit_menu.selection_menu.sel_flip_x'] = "'H'"
  mapping['edit_menu.selection_menu.sel_flip_y'] = "'V'"
  mapping['edit_menu.selection_menu.sel_move'] = "'Y'"
  mapping['edit_menu.selection_menu.size'] = "'Z'"
  mapping['edit_menu.selection_menu.tap'] = "''"
  
  mapping['file_menu.close'] = "'Ctrl+W'"
  mapping['file_menu.open_new_panel'] = "'Ctrl+O'"
  mapping['file_menu.open_same_panel'] = "'Ctrl+Shift+O'"
  mapping['file_menu.save'] = "'Ctrl+S'"
  mapping['file_menu.save_as'] = "'Ctrl+Shift+S'"
  mapping['file_menu.screenshot'] = "'F12'"
  mapping['file_menu.setup'] = "'F4'"
  
  mapping['macros_menu.macro_development'] = "'F5'"
  
  #mapping['view_menu.edit_top_level_selection'] = "'T'" # Handled in a different script
  #mapping['view_menu.default_grid.default_grid_1'] = "'1'" # CHECK that this doesn't conflict with calling that grid switcher elsewhere
  #mapping['view_menu.default_grid.default_grid_2'] = "'2'"
  #mapping['view_menu.default_grid.default_grid_3'] = "'3'"
  
  mapping['zoom_menu.ascend'] = "'PgUp'" # I may assign these later
  mapping['zoom_menu.descend'] = "'PgDown'" # I may assign these later
  mapping['zoom_menu.max_hier'] = "'*'"
  mapping['zoom_menu.max_hier_0'] = "''"
  mapping['zoom_menu.max_hier_1'] = "'/'"
  mapping['zoom_menu.dec_max_hier'] = "'-'"
  mapping['zoom_menu.inc_max_hier'] = "'+'"
  mapping['zoom_menu.goto_position'] = "'Ctrl+G'"
  mapping['zoom_menu.last_display_state'] = "'Shift+Tab'"
  mapping['zoom_menu.next_display_state'] = "'Tab'" 
  mapping['zoom_menu.select_current_cell'] = "''" # Display &gt; Show as new top
  mapping['zoom_menu.zoom_fit'] = "'F2'"
  mapping['zoom_menu.zoom_fit_sel'] = "'Shift+F2'"
  mapping['zoom_menu.zoom_in'] = "'Return'"
  mapping['zoom_menu.zoom_out'] = "'Shift+Return'"
  
  # turn the hash back into a config string
  config_new = mapping.collect{|k,v| "#{k}:#{v}"}.join(';')
  
  # activate &amp; store the changed configuration
  RBA::Application.instance.set_config('key-bindings', config_new)

end</text>
</klayout-macro>
