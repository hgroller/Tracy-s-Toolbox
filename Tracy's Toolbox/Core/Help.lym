<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Help</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>trt_menu.core_submenu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>## Help.lym
## By davidnhutch
## 
## This script puts together an html file based on info in each script and displays it in a Qt browser.
## Starting at 'start_path' and working its way down the hierarchy, this gets the help information
## from each of The Red Toolbox scripts. The help information is assumed to be the first block of
## double-hash-sign (double-pound-sign) text in the code. The first line is ignored (this is usually
## the title, but the title to be displayed here is taken from the filename), the second line to be 
## the author (e.g. "By davidnhutch"), and the remaining text to be the description.
## This simple implementation does not yet respect line breaks in the description.

start_path = File.dirname(File.dirname(__FILE__)) # File.dirname(__FILE__) gets the folder this script is in. So doing it twice gets the parent folder

app = Application.instance
trt_version = app.get_trt_config("trt-version")

nav = "" # Will hold navigation information
html = "" # Will hold html to display
preamble = "
    &lt;h1&gt;The Red Toolbox v#{trt_version}&lt;/h1&gt;
    &lt;p&gt;Put together by David Hutchison (a.k.a. 'davidnhutch', http://davidnhutch.com) using some of his own scripts and some that are found on klayout.de.&lt;/p&gt;
    &lt;p&gt;It is not recommended to modify these files, because to install a future version of TRT you can just overwrite the old version, which would destroy
    any changes you make. Instead, if you want to make changes, copy the script you want to a different location outside the TRT folder and then modify it.&lt;/p&gt;
    &lt;p&gt;Found a bug? Have a useful script to add? Have an improved version of one of these scripts? Email david.n.hutch@gmail.com and I'll include it in the next release. Thanks for supporting open source!&lt;/p&gt;
    &lt;p&gt;By using these scripts you acknowledge that you are operating at your own risk; I cannot take responsibility for any damages caused by using these scripts.&lt;/p&gt;
    &lt;p&gt;See 'About.lym' for more information.&lt;/p&gt;
  "

found_title_line = false # Keeps track of whether we have found the first line yet (the first instance of "## "

# Traverse each .lym, .rb, .rbm, .lydrc file, and get the double-hash-commented information
#Dir.glob(start_path + '/**/*.{lym,rb,rbm,lydrc}') { |file| # Double asterisk matches directories recursively
Dir.glob(start_path + '/**/*.{lym,rb,rbm,lydrc}') { |file| # Double asterisk matches directories recursively

  dir = File.dirname(file) # The parent directory's name
  dir = File.split(dir)[-1] 
  
  len = File.read(file).scan(/\n/).count
  
  File.open(file).each_with_index { |line,i|
    
    if !found_title_line
      if line[0..2] == "## "
        found_title_line = true
        
        # Use the filename here, i.e. ignore the first line
        title = File.basename(file)
        safe_linkname = File.basename(file,".*").gsub(/[^0-9A-Za-z.\-]/, '_') # remove the extension and any unusual characters
        nav  &lt;&lt; dir + "&amp;gt; &lt;a href='##{safe_linkname}'&gt;" + title + "&lt;/a&gt;&lt;br /&gt;"
        html &lt;&lt; "&lt;h2&gt;&lt;a name='#{safe_linkname}' &gt;" + title + "&lt;/a&gt;&lt;/h2&gt;"
        html &lt;&lt; "&lt;h3&gt;" + line.gsub('## ','') + "&lt;/h3&gt;"
      elsif i &gt;= len # If this is the last line
        line = File.basename(file)
        safe_linkname = File.basename(file,".*").gsub(/[^0-9A-Za-z.\-]/, '_') # remove the extension and any unusual characters
        nav  &lt;&lt; dir + "&amp;gt; &lt;a href='##{safe_linkname}'&gt;" + line + "&lt;/a&gt;&lt;br /&gt;"
        html &lt;&lt; "&lt;h2&gt;&lt;a name='#{safe_linkname}'&gt;" + line + "&lt;/a&gt;&lt;/h2&gt;"
        next # Since there are no more lines, this kicks it to the next file
      else
        next # Go to the next line
      end
    else # If you have already found the first line then read the next one and so on
      
      # Check that we're not at the end. If so, go to the next file
      if line[0..2] != "## "
        found_title_line = false
        break
      end
      
      # Otherwise, proceed to do stuff with 'line'
      line.gsub!('## ','').gsub!('\n','') # Remove comment chars and newlines
      if html[-5..-1] == "&lt;/h2&gt;" # If you just closed the h2 tag, i.e. if you just pushed the Title to the 'html' variable, then you want the next line to be &lt;h3&gt;author&lt;/h3&gt;, else it's just content
        html &lt;&lt; "&lt;h3&gt;" + line + "&lt;/h3&gt;"
      else
        html &lt;&lt; line
      end
      
      
      
    end

  }
  
  html &lt;&lt; "&lt;hr /&gt;"
}

# Put the nav part on the start
html = preamble + "&lt;hr /&gt;" + nav + "&lt;hr /&gt;" + html

RBA::BrowserDialog.new(html).exec
</text>
</klayout-macro>
